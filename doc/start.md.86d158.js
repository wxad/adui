(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{1519:function(n,s){n.exports={content:["article",["h1","开始使用"],["div",["img",{src:"https://wxa.wxs.qq.com/mpweb/delivery/legacy/wxadtouch/upload/t1/od834zef_52939fc6.png",style:"margin: 40px 0px 0px -8px; background-color: rgb(252, 252, 252); box-shadow: none;"}]],["hr"],["h2","开始使用"],["p",["strong","adui"]," 已经发布于 NPM。你可以通过你的包管理器安装（比如 ",["a",{title:null,href:"https://yarnpkg.com"},"Yarn"],"）："],["pre",{lang:"js",highlighted:'yarn add adui react react<span class="token operator">-</span>dom'},["code","yarn add adui react react-dom"]],["p",["strong","adui"]," 目前依赖的 ",["code","react"]," 与 ",["code","react-dom"]," 版本为 16.9.0。",["strong","adui 2.0"]," 使用了 ",["code","Hooks"]," 书写组件，请保证你的 React 版本 ^16.9.0。"],["hr"],["h2","Import"],["p","引入你所需要的 React 组件。"],["pre",{lang:"js",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"adui"</span>\n\n<span class="token operator">&lt;</span>Button intent<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>开始使用<span class="token operator">&lt;</span>Button<span class="token operator">/</span><span class="token operator">></span>'},["code",'import { Button } from "adui"\n\n<Button intent="primary">开始使用<Button/>']],["p","你不需要独立地引入样式，因为每个组件都会 import 自己的 ",["code",".css"]," 文件。你只需要保证 webpack 的 ",["code","css-loader"]," 能够作用到 ",["code","node_modules/adui"]," 这个文件夹，就能保证样式的正确。"],["p","未来会加入不需要依赖 webpack 配置的编译版本，届时 CSS 文件会完全与 JS 文件分离。"],["hr"],["h2","Webpack 按需"],["h3","组件与样式文件"],["p",["strong","adui 2.0"]," 在每个组件中单独引入了该组件的样式。因此，组件和样式的按需打包，通过 webpack 的 tree shaking 会自动得到处理。"],["h3","图标 Icon"],["p","由于 ",["strong","adui 2.0"]," 的组件设计，在只使用 ",["code",'<Icon icon="add" />']," 时会引入整个图标资源文件，因为所有的路径信息都存放在这同一个文件下。同样，如果只使用了 ",["code",'<Button leftIcon="add" />']," 也会引入所有图标，因为 ",["code","<Button />"]," 使用了 ",["code","<Icon />"],"。"],["p","现有的 API 有它的优势。对比业界方案（此处不展开讨论），",["strong","adui 2.0"]," 提供了基于 webpack 的 loader 和 plugin 帮助处理图标的按需提取。"],["pre",{lang:"js",highlighted:'<span class="token keyword">const</span> AduiIconLoader <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"adui/adui-icon-loader"</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> AduiIconPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"adui/adui-icon-plugin"</span><span class="token punctuation">)</span>'},["code",'const AduiIconLoader = require.resolve("adui/adui-icon-loader")\nconst AduiIconPlugin = require("adui/adui-icon-plugin")']],["p","如果项目使用了 create-react-app 创建，请先 eject 操作，因为我们需要修改 webpack 配置："],["pre",{lang:"js",highlighted:'<span class="token comment" spellcheck="true">// 第一步：对源文件在 babel-loader 后添加 AduiIconLoader</span>\n<span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|mjs|jsx|ts|tsx)$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> paths<span class="token punctuation">.</span>appSrc<span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> AduiIconLoader <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"babel-loader"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span>\n\n<span class="token comment" spellcheck="true">// 第二步：在 plugins 中加入 AduiIconPlugin</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">AduiIconPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span>'},["code",'// 第一步：对源文件在 babel-loader 后添加 AduiIconLoader\n{\n  test: /\\.(js|mjs|jsx|ts|tsx)$/,\n  include: paths.appSrc,\n  use: [\n    { loader: AduiIconLoader },\n    {\n      loader: require.resolve("babel-loader"),\n      ...\n    }\n  ]\n}\n\n...\n\n// 第二步：在 plugins 中加入 AduiIconPlugin\nplugins: [\n  new AduiIconPlugin(),\n  ...\n]']],["p","原理与注意事项之后补充。"],["h2","Vite 按需"],["p","可参考 ",["a",{title:null,href:"https://git.woa.com/wxad-design/vite-adui-example"},"AD UI Vite 示例项目"],"，此示例使用 ",["code","vite@2.4.0"],"，",["code","^adui@2.5.0"],"，提供样式按需解决方案、Icon 按需解决方案及 TailwindCSS 的引入。每一项功能都是非必需的。"],["hr"],["h2","主题色"],["p",["strong","adui"]," 使用了 CSS Variables 实现变量配置。同时配合 ",["a",{title:null,href:"https://github.com/jhildenbiddle/css-vars-ponyfill"},"css-vars-ponyfill"]," 解决兼容性问题。",["br"],"在引入之后，你的页面上就会有如下的样式："],["pre",{lang:"css",highlighted:'<span class="token selector"><span class="token pseudo-class">:root</span> </span><span class="token punctuation">{</span>\n  <span class="token property">--primary-color</span><span class="token punctuation">:</span> <span class="token hexcode">#07c160</span><span class="token punctuation">;</span>\n  <span class="token number">...</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>'},["code",":root {\n  --primary-color: #07c160;\n  ...;\n}"]],["p","你可以用更高优先级的 CSS 规则覆盖："],["pre",{lang:"css",highlighted:'<span class="token selector">html<span class="token pseudo-class">:root</span> </span><span class="token punctuation">{</span>\n  <span class="token property">--primary-color</span><span class="token punctuation">:</span> <span class="token hexcode">#00bb9c</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>'},["code","html:root {\n  --primary-color: #00bb9c;\n}"]],["p",["strong","adui"]," 还设置了许多其他变量比如 ",["code","--gray-50"]," 至 ",["code","--gray-900"],"，请小心修改这些变量。"],["hr"],["h2","兼容性"],["h2","Browsers support"],["table",["thead",["tr",["th",["a",{title:null,href:"http://godban.github.io/browsers-support-badges/"},["img",{style:"display: inline-block; margin: 0px; width: 24px; height: 24px; border-radius: 0; box-shadow: none;",src:"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png",alt:"IE / Edge",width:"24px",height:"24px"}]],["br"],"IE / Edge"],["th",["a",{title:null,href:"http://godban.github.io/browsers-support-badges/"},["img",{style:"display: inline-block; margin: 0px; width: 24px; height: 24px; border-radius: 0; box-shadow: none;",src:"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png",alt:"Firefox",width:"24px",height:"24px"}]],["br"],"Firefox"],["th",["a",{title:null,href:"http://godban.github.io/browsers-support-badges/"},["img",{style:"display: inline-block; margin: 0px; width: 24px; height: 24px; border-radius: 0; box-shadow: none;",src:"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png",alt:"Chrome",width:"24px",height:"24px"}]],["br"],"Chrome"],["th",["a",{title:null,href:"http://godban.github.io/browsers-support-badges/"},["img",{style:"display: inline-block; margin: 0px; width: 24px; height: 24px; border-radius: 0; box-shadow: none;",src:"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png",alt:"Safari",width:"24px",height:"24px"}]],["br"],"Safari"],["th",["a",{title:null,href:"http://godban.github.io/browsers-support-badges/"},["img",{style:"display: inline-block; margin: 0px; width: 24px; height: 24px; border-radius: 0; box-shadow: none;",src:"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png",alt:"Opera",width:"24px",height:"24px"}]],["br"],"Opera"]]],["tbody",["tr",["td","Edge"],["td","last 2 versions"],["td","last 2 versions"],["td","last 2 versions"],["td","last 2 versions"]]]],["hr"],["h2","关于组件类型"],["p",["strong","adui 2.0"]," 一部分组件以 ",["code","Function Component"]," + ",["code","Hooks"]," 实现。\n现在，组件一共有 类组件（",["code","Class Component"],"），函数组件（",["code","Function Component"],"），以及也属于函数组件的",["code","ForwardRef Component"],"这三种。"],["h2","关于内部驱动与外部控制"],["p",["strong","adui"]," 所有包含状态的组件都有两种设计，即 ",["strong","内部驱动（uncontrolled）"]," 与 ",["strong","外部控制（controlled）"],"。"],["p","代表内部驱动的 Prop 是 ",["code","defaultValue"],"，代表外部控制的 Prop 是 ",["code","value"],"。比如 ",["code","<Switch />"]," 组件的 ",["code","defaultChecked"]," 与 ",["code","checked"],"。"],["p",["code","defaultChecked"]," 只在第一次渲染时生效，之后的状态变化都会完全交给组件自身完成；",["br"],"而 ",["code","checked"]," 则代表如果不从外部改变，那么组件的状态就不会变化（代码上由生命周期 ",["code","getDerivedStateFromProps"]," 或 ",["code","useEffect"]," 实现的）。"],["p","这样设计的原理来源于 React 对表单的 Controlled/Uncontrolled 的概念。",["a",{title:null,href:"https://reactjs.org/docs/forms.html#controlled-components"},"请阅读学习"],"，并且按照需求选择这两种模式使用。"],["p","如果你只是需要设置一个初始值，并且只想要关心这个值的改变情况，比如 ",["code","<Switch defaultChecked onChange={xxx} />"],"，这样你就不需要单独地设置一个 state 保证组件 UI 状态的完整；\n如果你想要存储这个值，那么你需要在变化时将这个值回传给组件：",["code","<Switch checked={xxx} onChange={xxx} />"],"。"]],meta:{filename:"doc/start.md"}}}}]);